/**
在程序编译后，产生的区域---堆区
    堆区由程序员字符掌握生命周期,由程序员开辟释放。new关键字符开辟空间

**/
#include "iostream"
using namespace std;


//堆区new开辟内存  new 变量类型(数据初始值)   返回new出来内存的地址，地址用指针存放
int* fuction( void)
{
//p是局部变量栈区 new是分配内存在堆区   用栈区的值去存放堆区的值。 运行完后p指向的东西还在
    int *p = new int(10); //new返回新建内存的地址   用指针存放
    return p;  //返回的是堆区的地址,由程序员选择释放，函数要定义成指针
             //不能返回的是局部变量的地址
}


int main(void)
{

    int *p = fuction();
    cout<< *p <<endl; //返回的是函数指针的值
    cout<< *p <<endl; //返回的是函数指针的值
    cout<< *p <<endl; //返回的是函数指针的值
//只要不人为释放,这个new int就一直存在。或者程序结束


    cout<< "\r\n\r\n输入字符程序结束\r\n"<<endl;
    cin.get();
    return 0;
}

/**
结论:
    1.new关键字产生动态分配的变量,该变量存放在堆区
    2.用法 new 变量类型(初始化值)
    3.new关键字返回的是一个指针,因此需要一个同类型的指针变量来存放其值
    4.new开辟内存后记得要释放
**/

/**
c/c++ 和嵌入式 都将所有的代码分为4个区:
1.代码区:用于存放代码的地方，把函数体转换为二进制由操作系统管理
2.全局区:用于存放全局extern，静态static和常量const和define宏定义。嵌入式又把全局区分为:data和biss。该区域的数据在程序结束后由操作系统释放
3.栈区:存放局部变量,函数值传递参数值。编译器自动释放
4.堆区:malloc由程序员自己分配和释放的区域，若未释放程序结束后自行释放
意义?
不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程
**/

/**
1.代码区:
在程序编译后，生成了exe可执行程序。未执行该程序前，分为两个区域
**代码区：**
    存放 CPU 执行的机器指令(二进制0101的指令)
    代码区是**共享**的:点击exe,就跳到代码区开始执行.但把一个exe运行多次总不能复制多次代码区吧?
                       因此代码区是共享的,运行多次exe指的运行也是那个代码区。代码区是共享的
    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令。总不能运行exe程序就改变我源码吧

**/


/**
在程序编译后，生成了exe可执行程序。未执行该程序前，分为两个区域
2.全局区
**代码区：**
    存放 CPU 执行的机器指令(二进制0101的指令)
    代码区是**共享**的:点击exe,就跳到代码区开始执行.但把一个exe运行多次总不能复制多次代码区吧?
                       因此代码区是共享的,运行多次exe指的运行也是那个代码区。代码区是共享的
    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令

**/



/**
原因：数组定义与初始化分开时，只能进行单个元素的赋值，而不能进行统一赋值。
      在全局区数组不能分别赋值，局部区可以
      全局区和局部区都可以整体赋值
C语言的规定!!!除了变量和类型定义初始化可以放到外面，其它必须放到函数内如变量赋值。
**/
#include "iostream"
using namespace std;


int main(void)
{

    cout<< "\r\n\r\n请输入字符串结束程序运行\r\n"<< endl;
    cin.get();
    return 0;
}

/**
对象的初始化和清理(构造函数和析构函数)
1.生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全。
  C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。
2.一个对象或者变量没有"初始状态"，对其使用后果是未知。同样的使用完一个对象或变量，没有"及时清理"，
  也会造成一定的安全问题
3.构造函数------对象使用前"初始状态" 主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自
  动调用，无须手动调用。
  析构函数------对象使用后"及时清理" 主要作用在于对象**销毁前**系统自动调用，执行一些清理工作
4.对象的初始化和清理工作是编译器强制要我们做的事情，因此我们不提供构造和析构，编译器会自己提供，
  只不过编译器提供的构造和析构是空的函数罢了(空实现)
5.构造函数语法:类名(){}  ①构造函数没返回值，也不写void
                         ②构造函数名和类名相同
                         ③构造函数可以有参数,因此可以重载
                         ④构造函数是自动调用,不用手动调用,只调用一次(就像只初始化一次)
6.析构函数语法:~类名(){} ①没返回值,不写void
                         ②函数名前加~
                         ③不能有参数,也没重载
                         ④程序在对象销毁前会自动调用析构,不用手动,只调一次
**/
/**
有什么用？后期会讲
**/

#include "iostream"
using namespace std;
/** 对象初始化和销毁(构造和析构) **/
class Person
{
public:
//1.构造函数 对对象进行初始化操作
//  1.1构造函数语法 类名(){}
//  1.2构造函数没返回值,不写void
//  1.3构造函数可以写参数,可以重载
//  1.4构造函数自动调用一次
    Person()
    {
        cout<< "Person构造函数会自动调用一次，起到初始化的作用"<<endl;
    }
//2.析构函数 对象销毁前会自动调用一次用于数据销毁
//  2.1析构函数和构造函数语法一样，多一个~符号
//  2.2析构没返回值,不写void
//  2.3析构函数不写参数,不能重载
//  2.4析构会在对象销毁前会自动调用一次
    ~Person()
    {
        cout<< "~Person析构函数会自动调用一次，起到对象销毁的作用"<<endl;
    }
};

//构造和析构是必须有的,自己不写编译器会自动写
void test01()
{
    Person p1; //p1局部变量,在栈上.在test01()执行完,就会释放p1,释放(销毁)p1前就会自动调用析构函数
}

int main(void)
{
    //test01();
    Person p1; //写在main不会有析构,因此main还没执行完。执行完就销毁变量p1就调用析构了

    cout<<"\r\n\r\n输入任意字符结束函数\r\n"<<endl;
    cin.get();
    return 0;
}
/**
SUMMERIZE:
1.构造函数:初始化对象用
2.析构函数:销毁对象用
3.写法 类名(){}   ~类名(){}   没返回值不写void  自动调用不用管
4.必须写 自己不写编译器就给写一个空的
**/
